#!/bin/bash
#this is have some issue, use alias clone = cclone to redirect clone.
pname=`basename $0`
if [ "$pname" = "git" ];then
#    echo "redirect to real git"
    all="$@"
    echo $all | grep -q "clone "
    if [ "$?" != "0" ] ;then
        new="$@"
    else
        new=${all/clone /cclone }
    fi
#    echo -e "\e[0;43m git $new \e[0m"
    /usr/bin/git $new
    exit 0
fi

#echo "\e[0;33m Using fast clone \e[0m"
#echo "Using fast clone"
#echo "command: $@"

cache_path=~/.mygitcache
gitapp=git
git_clone=/usr/lib/git-core/git-clone
all_argv="$@"
if [ $# -eq 0 ];then
    $git_clone -h
    exit 0    
fi

if [ "$1" = "clean" ];then
   if [ -n "$2" ] && [ -d "${cache_path}/$2" ];then
	echo "remove cache $2"
	rm -rf ${cache_path}/$2
   else
	echo "Invalid cache name"
	echo "valid is :"
	ls ${cache_path}
   fi
   exit 0   
fi

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -b|--branch)
      BRANCH="$2"
      shift # past argument
      shift # past value
      ;;
    --reference|--reference-if-able)
      REFERENCE="$2"
      shift # past argument
      shift # past value
      ;;
    --recurse-submodules)
      RCV_SMODULE=1
      shift
      ;;
    *)    # unknown option
      echo $key | grep -q "^http://\|^ssh://\|^https://"
      if [ "$?" = "0" ];then
          REPO=$key
      fi
      shift # past argument
      ;;
  esac
done

if [ ! -z "$REFERENCE" ];then
        $git_clone $@
	exit 0
fi

if [ -z "$REPO" ];then
#    echo "can NOT know repo url, no cache"
    git clone $all_argv
    exit 0
fi

git_name=`basename $REPO`
git_name=${git_name%.git}
URLMD5=`echo $REPO | md5sum | cut -f1 -d" "`
ref_name="${cache_path}/${git_name}-${URLMD5}"
ref_name_full="${cache_path}/${git_name}-${URLMD5}"

if [ ! -d ${ref_name_full} ];then
#    echo "cache ${REPO} to ${ref_name_full}"
    echo -e "\e[0;33m cache ${git_name} to ${ref_name}\e[0m"
    $git_clone --progress ${REPO} ${ref_name_full}
fi
if [ "$BRANCH" != "" ];then
     $gitapp -C $ref_name_full checkout $BRANCH
fi
if [ "$RCV_SMODULE" = "1" ];then
#    echo "$gitapp clone -C ${ref_name_full} submodule init"
    $gitapp -C ${ref_name_full} submodule init
#    echo "$gitapp clone -C ${ref_name_full} submodule update --reference $REFERENCE"
    $gitapp -C ${ref_name_full} submodule update
fi
echo -e "\e[0;33m clone by reference $ref_name\e[0m"
$git_clone --reference-if-able $ref_name_full $all_argv


